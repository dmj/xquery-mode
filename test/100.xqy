xquery version "1.0-ml";

(: This module was generated by MarkLogic Entity Services.                         :)
(: The source entity type document was Northwind-0.0.2                             :)
(:                                                                                 :)
(: To use this module, examine how you wish to extract data from sources,          :)
(: and modify the various extract-instance-{X} functions to                        :)
(: create the instances you wish.                                                  :)
(:                                                                                 :)
(: You may wish to/need to alter                                                   :)
(: 1.  values.  For example, creating duration values from decimal months.         :)
(: 2.  references.  This conversion module assumes you want to denormalize         :)
(:     instances when storing them in documents.  You may choose to remove         :)
(:     code that denormalizes, and just include reference values in your instances :)
(:     instead.                                                                    :)
(: 3.  Source XPath expressions.  The data coming into the extract-instance-{X}    :)
(:     functions will probably not be exactly what this module predicts.           :)
(:                                                                                 :)
(: After modifying this file, put it in your project for deployment to the modules :)
(: database of your application, and check it into your source control system.     :)
(:                                                                                 :)
(: Modification History:                                                           :)
(: Generated at timestamp: 2016-09-09T09:21:22.624248-07:00                        :)
(:   Persisted by AUTHOR                                                           :)
(:   Date: DATE                                                                    :)
module namespace northwind
  = "http://marklogic.com/test#Northwind-0.0.2";

import module namespace es = "http://marklogic.com/entity-services"
  at "/MarkLogic/entity-services/entity-services.xqy";

(:  extract-instance-{entity-type} functions                                       :)
(:                                                                                 :)
(:  These functions take together take a source document and create a nested       :)
(:  map structure from it.                                                         :)
(:  The resulting map is used by instance-to-canonical-xml to create documents     :)
(:  in the database.                                                               :)
(:                                                                                 :)
(:  It is expected that an implementer will edit at least XPath expressions in     :)
(:  the extraction functions.  It is less likely that you will want to edit        :)
(:  the instance-to-canonical-xml or envelope functions.                           :)

(:~
 : Creates a map:map instance from some source document.
 : @param $source-node  A document or node that contains
 :   data for populating a Customer
 : @return A map:map instance with extracted data and
 :   metadata about the instance.
 :)
declare function northwind:extract-instance-Customer(
  $source-node as node()
) as map:map
{
  (: if this $source-node is a reference to another instance, then short circuit. :)
  if (empty($source-node/element()/*))
  then json:object()
       =>map:with('$type', 'Customer')
       =>map:with('$ref', $source-node/Customer/text())
       =>map:with('$attachments', $source-node)
  else json:object()
       =>map:with('$type', 'Customer')
       =>map:with('$attachments', $source-node)
       =>map:with('CustomerID',  xs:string($source-node/Customer/@CustomerID))
       =>es:optional('CompanyName', xs:string($source-node/Customer/CompanyName))
       =>es:optional('Country',     xs:string($source-node/Customer/Country))
       =>es:optional('ContactName', xs:string($source-node/Customer/ContactName))
       =>es:optional('Phone',       xs:string($source-node/Customer/Phone))

};

(:~
 : This function includes an array if there are items to put in it.
 : If there are no such items, then it returns an empty sequence.
 : TODO EA-4? move to es: module
 :)
declare function northwind:extract-array(
  $path-to-property as item()*,
  $fn as function(*)
) as json:array?
{
  if (empty($path-to-property))
  then ()
  else json:to-array($path-to-property ! $fn(.))
};

(:~
 : Turns an entity instance into an XML structure.
 : This out-of-the box implementation traverses a map structure
 : and turns it deterministically into an XML tree.
 : Using this function as-is should be sufficient for most use
 : cases, and will play well with other generated artifacts.
 : @param $entity-instance A map:map instance returned from one of the extract-instance
 :    functions.
 : @return An XML element that encodes the instance.
 :)
declare function northwind:instance-to-canonical-xml(
  $entity-instance as map:map
) as element()
{
  (: Construct an element that is named the same as the Entity Type :)
  element { map:get($entity-instance, "$type") }  {
    if ( map:contains($entity-instance, "$ref") )
    then map:get($entity-instance, "$ref")
    else
      for $key in map:keys($entity-instance)
      let $instance-property := map:get($entity-instance, $key)
      where ($key castable as xs:NCName and $key ne "$type")
      return
        typeswitch ($instance-property)
        (: This branch handles embedded objects.  You can choose to prune
           an entity's representation of extend it with lookups here. :)
        case json:object+
          return
            for $prop in $instance-property
            return element { $key } { northwind:instance-to-canonical-xml($prop) }
        (: An array can also treated as multiple elements :)
        case json:array
          return
            for $val in json:array-values($instance-property)
            return
              if ($val instance of json:object)
              then element { $key } { northwind:instance-to-canonical-xml($val) }
              else element { $key } { $val }
        (: A sequence of values should be simply treated as multiple elements :)
        case item()+
          return
            for $val in $instance-property
            return element { $key } { $val }
        default return element { $key } { $instance-property }
  }
};


(:
 : Wraps a canonical instance (returned by instance-to-canonical-xml())
 : within an envelope patterned document, along with the source
 : document, which is stored in an attachments section.
 : @param $entity-instance an instance, as returned by an extract-instance
 : function
 : @return A document which wraps both the canonical instance and source docs.
 :)
declare function northwind:instance-to-envelope(
  $entity-instance as map:map
) as document-node()
{
  document {
    element es:envelope {
      element es:instance {
        element es:info {
          element es:title { map:get($entity-instance,'$type') },
          element es:version { "0.0.2" }
        },
        northwind:instance-to-canonical-xml($entity-instance)
      },
      element es:attachments {
        map:get($entity-instance, "$attachments")
      }
    }
  }
};
